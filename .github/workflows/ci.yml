name: CI

on:  
  push:
    branches: ["feature/**", "bugfix/**"]
  pull_request:
    branches: ["develop", "main"]

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:  [ubuntu-latest] # Add windows-latest, macos-latest if needed
        python-version: ["3.12"] # Add multiple versions in needed ["3.10", "3.11", "3.12"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'  # Enables caching for pip dependencies

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 pytest pytest-cov

      - name: Run flake8 linting
        run: flake8

      - name: Run tests with coverage
        run: |
          pytest --cov-branch --cov-report=xml --cov=src tests/ --junitxml=junit.xml -o junit_family=legacy
        env:
          CI: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: junit.xml

      - name: Run Trivy Security Scan (Source Code)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          ignore-unfixed: true
          exit-code: 1
          severity: "CRITICAL,HIGH"

  build:
    name: Build & Push Docker Image to GHCR
    runs-on: ubuntu-latest
    needs: test  # Runs only if tests pass
    permissions:
      contents: read  # Needed for actions/checkout
      packages: write  # Required to push to GHCR
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        # with:
        #   fetch-depth: 0

      - name: Set up Docker buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        #run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $GITHUB_ACTOR --password-stdin


      - name: Build and Push Docker Image
        run: |
          docker build -t ghcr.io/${{ github.repository }}/my-app:latest .
          docker push ghcr.io/${{ github.repository }}/my-app:latest

      # PROVARE COSì per vedere se funziona con repo privato. PErò poi usare quelle sotto, a TAGGARE!!! SUBITO!. altrimenti fare check if se repo e priato o pubblico ma non professionale come cosa

      # - name: Build and tag Docker image
      #   run: |
      #     docker build -t ghcr.io/${{ github.repository_owner }}/demo-flask-app:latest .
      #     docker tag ghcr.io/${{ github.repository_owner }}/demo-flask-app:latest ghcr.io/${{ github.repository_owner }}/demo-flask-app:${{ github.sha }}
        

      # - name: Push Docker image to GHCR
      #   run: |
      #     docker push ghcr.io/${{ github.repository_owner }}/demo-flask-app:latest
      #     docker push ghcr.io/${{ github.repository_owner }}/demo-flask-app:${{ github.sha }}
      